x-airflow-common: &airflow-common
  build:
    context: ./docker/docker-airflow
    dockerfile: Dockerfile
  env_file:
    - .env
  user: "${AIRFLOW_UID:-50000}:0"
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    PYTHONPATH: "/opt/airflow/dags:/opt/airflow/plugins"
    # AIRFLOW_CONN_SPARK_DEFAULT: "spark://spark-master:7077"

    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__SCHEDULER__STANDALONE_DAG_PROCESSOR: "true"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./logs:/opt/airflow/logs
    - ./spark/apps:/opt/airflow/jobs  
    - ./ml:/opt/airflow/ml
    - ./producer:/opt/airflow/producer
    - ./data:/opt/airflow/data

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    user: "0:0"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -euo pipefail
        echo "[init] wait for DB..."
        until airflow db check >/dev/null 2>&1; do sleep 3; done
        airflow db upgrade || airflow db init
        airflow users create \
          --username "${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
          --firstname Admin --lastname User \
          --role Admin \
          --email "${_AIRFLOW_WWW_USER_EMAIL:-airflow@example.com}" \
          --password "${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" || true
        airflow pools set riot-api-pool 5 "Riot API rate-limit pool" || true
        echo "[init] done."
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/health >/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler

    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8793/health >/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type TriggererJob --local"]
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type TriggererJob --local"]
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  ##여기까지 airflow 관련


  spark-master:
    image: bitnami/spark:3.5.1
    env_file:  
      - .env 
    environment:
      - SPARK_MODE=master
      - SPARK_SUBMIT_OPTS=-Duser.home=/opt/bitnami
      - SPARK_EXTRA_OPTS=--conf spark.jars.ivy=/opt/bitnami/.ivy2
      - PYSPARK_PYTHON=/opt/bitnami/python/bin/python3
      - PYSPARK_DRIVER_PYTHON=/opt/bitnami/python/bin/python3

    ports:
      - "9090:8080"  
      - "7077:7077"  
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/data:/opt/bitnami/spark/data

    restart: unless-stopped     
    healthcheck:                  
      test: ["CMD", "curl", "-f", "http://localhost:8080"] 
      interval: 30s
      timeout: 5s
      retries: 5

  spark-worker:
    image: bitnami/spark:3.5.1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - PYSPARK_PYTHON=/opt/bitnami/python/bin/python3
      - PYSPARK_DRIVER_PYTHON=/opt/bitnami/python/bin/python3

    
    depends_on:
      - spark-master

    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/data:/opt/bitnami/spark/data

##여기까지 spark 관련

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "29092:29092" 

    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller

      - KAFKA_LISTENERS=INTERNAL://:19092,EXTERNAL://:29092,CONTROLLER://:9093

      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:19092,EXTERNAL://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093

      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - CLUSTER_ID=_22lvlHrTBakAb2cDmi4hA

    volumes:
      - kafka-data:/var/lib/kafka/data





##여기까지 kafka 관련

volumes:
  postgres-db-volume:
  kafka-data:


