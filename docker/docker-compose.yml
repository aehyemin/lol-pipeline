x-airflow-common: &airflow-common
  build: 
    context: ./docker-airflow
    dockerfile: dockerfile
  env_file: 
    - .env
  environment:
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager

    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"

    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    SNOWFLAKE_USER: ${SNOWFLAKE_USER}
    SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD}
    SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT}



  volumes:
    - ../dags:/opt/airflow/dags
    - ../plugins:/opt/airflow/plugins
    - ../logs:/opt/airflow/logs
    # - ./airflow-passwords:/opt/airflow/passwords
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-riot-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]

    restart: always

  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "airflow db migrate &&
      airflow users create --role Admin --username ${AIRFLOW_ADMIN_USER}
      --password ${AIRFLOW_ADMIN_PASSWORD} --email ${AIRFLOW_ADMIN_EMAIL}
      --lastname User --firstname Admin || true"

    restart: "no"




  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type ApiServerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
##여기까지 airflow 관련


  spark-master:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - SPARK_SUBMIT_OPTS=-Duser.home=/opt/bitnami
      - SPARK_EXTRA_OPTS=--conf spark.jars.ivy=/opt/bitnami/.ivy2

  
    ports:
      - "9090:8080"  
      - "7077:7077"  
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/data:/opt/bitnami/spark/data

  spark-worker:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077

    
    depends_on:
      - spark-master

    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/data:/opt/bitnami/spark/data

##여기까지 spark 관련


##여기까지 kafka 관련

volumes:
  postgres-db-riot-volume: